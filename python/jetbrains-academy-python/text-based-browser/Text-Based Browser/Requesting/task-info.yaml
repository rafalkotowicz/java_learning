type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = 'tb_tabs'
            return [
                TestCase(
                    stdin='bloomberg.com\nbloomberg\nexit',
                    attach='Bloomberg',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimes.com\nnytimes\nexit',
                    attach='The New York Times',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> int:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:
                print("file: {}".format(file))
                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    try:
                        content = tab.read()
                    except UnicodeDecodeError:
                        return -1
                    print(content)
                    if 'html' in content and right_word in content:
                        return 1

            return 0

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked whether the URL was correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                check_files_result = self._check_files(path_for_tabs, right_word)
                if not check_files_result:
                    return CheckResult.wrong('There are no correct saved tabs')
                elif check_files_result == -1:
                    return CheckResult.wrong('An error occurred while reading your saved tab. '
                                             'Perhaps you used the wrong encoding?')

                try:
                    shutil.rmtree(path_for_tabs)
                except PermissionError:
                    return CheckResult.wrong("Impossible to remove the directory for tabs. Perhaps you haven't closed some file?")

                if '<body' in reply and right_word in reply:
                    return CheckResult.correct()

                return CheckResult.wrong('You haven\'t print result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: "import os\nfrom collections import deque\nfrom os import rmdir, mkdir, path\n\
    from urllib.parse import urlparse\n\nimport sys\n\nnytimes_com = '''\nThis New\
    \ Liquid Is Magnetic, and Mesmerizing\n\nScientists have created “soft” magnets\
    \ that can flow \nand change shape, and that could be a boon to medicine \nand\
    \ robotics. (Source: New York Times)\n\n\nMost Wikipedia Profiles Are of Men.\
    \ This Scientist Is Changing That.\n\nJessica Wade has added nearly 700 Wikipedia\
    \ biographies for\n important female and minority scientists in less than two\
    \ \n years.\n\n'''\n\nbloomberg_com = '''\nThe Space Race: From Apollo 11 to Elon\
    \ Musk\n\nIt's 50 years since the world was gripped by historic images\n of Apollo\
    \ 11, and Neil Armstrong -- the first man to walk \n on the moon. It was the height\
    \ of the Cold War, and the charts\n were filled with David Bowie's Space Oddity,\
    \ and Creedence's \n Bad Moon Rising. The world is a very different place than\
    \ \n it was 5 decades ago. But how has the space race changed since\n the summer\
    \ of '69? (Source: Bloomberg)\n\n\nTwitter CEO Jack Dorsey Gives Talk at Apple\
    \ Headquarters\n\nTwitter and Square Chief Executive Officer Jack Dorsey \n addressed\
    \ Apple Inc. employees at the iPhone maker’s headquarters\n Tuesday, a signal\
    \ of the strong ties between the Silicon Valley giants.\n'''\n\n# INIT\nprint(\"\
    [DEBUG] Initialization STARTED\")\n\nexpected_noof_arguments = 1\nprovided_args\
    \ = f\"You provided {len(sys.argv) - 1} arguments\"\nexpected_args = f\"Expected\
    \ exactly {expected_noof_arguments} argument\"\n\nif len(sys.argv) - 1 < expected_noof_arguments:\n\
    \    print(f\"[ERROR] Too few arguments passed to script. {provided_args}. {expected_args}.\"\
    )\n    sys.exit(-1)\nelif len(sys.argv) - 1 > expected_noof_arguments:\n    print(f\"\
    [ERROR] Too many arguments passed to script. {provided_args}. {expected_args}.\"\
    )\n    sys.exit(-1)\n\nworkdir = sys.argv[1]\nif os.path.exists(workdir):\n  \
    \  for root, dirs, files in os.walk(workdir, topdown=False):\n        for name\
    \ in files:\n            os.remove(os.path.join(root, name))\n    for name in\
    \ dirs:\n        os.rmdir(os.path.join(root, name))\n\n    rmdir(workdir)\n  \
    \  print(f\"[DEBUG] Directory found and removed: {workdir}\")\n\nmkdir(workdir)\n\
    print(f\"[DEBUG] Directory created: {workdir}\")\n\nprint(\"[DEBUG] Initialization\
    \ DONE\")\n\n\n# UTILS\ndef is_url(maybe_url):\n    parsed_url = urlparse(maybe_url)\n\
    \    if str(parsed_url.path).__contains__(\".\"):\n        return True\n    else:\n\
    \        return False\n\n\ndef read_file(file_name):\n    file_path = path.join(workdir,\
    \ file_name)\n    if path.exists(file_path):\n        with open(file_path, 'r',\
    \ encoding='utf-8') as file_to_read:\n            print(file_to_read.read())\n\
    \            history.append(file_name)\n\n\ndef write_file(file_name, content):\n\
    \    file_path = path.join(workdir, file_name)\n    with open(file_path, 'w',\
    \ encoding='utf-8') as file_to_write:\n        file_to_write.write(content)\n\n\
    \n# MAIN\nhistory = deque()\nwhile True:\n    request = input(\"Provide valid\
    \ URL or type 'exit' to leave the program\\n\")\n\n    if request == \"exit\"\
    :\n        break\n\n    if request == \"back\":\n        print(f\"History len:\
    \ {len(history)}\")\n        if len(history) == 0:\n            continue\n   \
    \     else:\n            history.pop()\n            request = history.pop()\n\n\
    \    if request == \"bloomberg.com\":\n        write_file(\"bloomberg\", bloomberg_com)\n\
    \        read_file(\"bloomberg\")\n    elif request == \"bloomberg\":\n      \
    \  read_file(\"bloomberg\")\n    elif request == \"nytimes.com\":\n        write_file(\"\
    nytimes\", nytimes_com)\n        read_file(\"nytimes\")\n    elif request == \"\
    nytimes\":\n        read_file(\"nytimes\")\n    else:\n        print(\"[ERROR]\
    \ Unrecognized web page!\")\n"
  learner_created: true
- name: tb_tabs/bloomberg
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/439/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/79/stages/439/implement">JetBrains
    Academy</a>
  time: Mon, 07 Sep 2020 20:55:20 UTC
record: -1
